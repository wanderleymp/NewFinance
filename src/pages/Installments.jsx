// DIAGN√ìSTICO CR√çTICO
// console.error('üö® DIAGN√ìSTICO CR√çTICO: M√ìDULO INSTALLMENTS CARREGADO');
window.debugInstallments = {
  log: (message) => console.error(`üö® DEBUG INSTALLMENTS: ${message}`),
  state: {}
};

import React, { useState, useEffect, useMemo, useCallback } from 'react';
import { 
  Box, 
  Typography, 
  Table, 
  TableBody, 
  TableCell, 
  TableContainer, 
  TableHead, 
  TableRow, 
  Paper, 
  TablePagination,
  TextField,
  InputAdornment,
  IconButton,
  Grid,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  Chip,
  Tooltip,
  Menu,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  CircularProgress,
  Checkbox,
  FormControlLabel,
  Alert,
  Stack
} from '@mui/material';
import { 
  Search as SearchIcon, 
  CalendarMonth as CalendarMonthIcon,
  FilterList as FilterListIcon,
  WhatsApp as WhatsAppIcon, 
  Email as EmailIcon, 
  Share as ShareIcon,
  Edit as EditIcon,
  CalendarToday as CalendarTodayIcon,
  Notifications as NotificationsIcon,
  Payment as PaymentIcon,
  Add, 
  Receipt as ReceiptIcon
} from '@mui/icons-material';
import { 
  AttachMoney as MoneyIcon, 
  CheckCircle as PaidIcon, 
  PendingActions as PendingIcon 
} from '@mui/icons-material';
import { 
  SentimentDissatisfied as SentimentDissatisfiedIcon, 
  ErrorOutline as ErrorOutlineIcon, 
  Refresh as RefreshIcon 
} from '@mui/icons-material';
import CheckCircleIcon from '@mui/icons-material/CheckCircle';
import EventIcon from '@mui/icons-material/Event';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import { DatePicker } from '@mui/x-date-pickers/DatePicker';
import { ptBR } from 'date-fns/locale';
import { format, addDays, differenceInDays, isPast, startOfDay, endOfDay, parse, startOfWeek, endOfWeek, startOfMonth, endOfMonth, subDays, isSameDay, addMonths, addWeeks, isAfter } from 'date-fns';
import { useSnackbar } from 'notistack';
import { installmentsService, updateInstallmentDueDate } from '../services/api';
import api from '../services/api'; // Import the api instance
import axios from 'axios'; // Import axios instance

// Adicionar log de diagn√≥stico global
// console.error('üö® INSTALLMENTS MODULE LOADED GLOBALLY');

// For√ßar log de diagn√≥stico
// window.debugInstallments.log('Importa√ß√µes carregadas');

// Fun√ß√£o para limpar valor de moeda
const cleanCurrencyValue = (value) => {
  if (!value) return '';
  
  // Remove caracteres n√£o num√©ricos, exceto v√≠rgula e ponto
  const cleanedValue = value.toString().replace(/[^\d,\.]/g, '');
  
  // Substitui v√≠rgula por ponto se necess√°rio
  const normalizedValue = cleanedValue.replace(',', '.');
  
  // Converte para n√∫mero com duas casas decimais
  const result = parseFloat(parseFloat(normalizedValue).toFixed(2));
  
  return isNaN(result) ? 0 : result;
};

// Fun√ß√£o segura para formatar data
const safeFormatDate = (date) => {
  try {
    // Log para diagn√≥stico
    console.log('üîç Formatando data:', { 
      originalDate: date, 
      type: typeof date,
      isDate: date instanceof Date,
      isValidDate: date && !isNaN(new Date(date))
    });

    // Se for uma string, converte para Date considerando o timezone local
    const parsedDate = typeof date === 'string' 
      ? parse(date, 'yyyy-MM-dd\'T\'HH:mm:ss.SSS\'Z\'', new Date())  // Usa parse com formato espec√≠fico
      : date;
    
    // Verifica se √© uma data v√°lida
    return parsedDate && !isNaN(parsedDate) 
      ? format(parsedDate, 'dd/MM/yyyy') 
      : 'Data inv√°lida';
  } catch (error) {
    console.error('Erro ao formatar data:', error);
    return 'Data inv√°lida';
  }
};

// Fun√ß√£o para formatar valor monet√°rio
const formatCurrency = (value) => {
  if (!value) return '0,00';
  
  // Converte para n√∫mero se for string
  const numericValue = typeof value === 'string' 
    ? parseFloat(value.replace(',', '.')) 
    : value;
  
  // Verifica se √© um n√∫mero v√°lido
  if (isNaN(numericValue)) return '0,00';
  
  // Formata com duas casas decimais
  return numericValue.toLocaleString('pt-BR', {
    minimumFractionDigits: 2,
    maximumFractionDigits: 2
  });
};

export default function Installments() {
  // Estados para di√°logos e edi√ß√µes
  const [editDueDateDialogOpen, setEditDueDateDialogOpen] = useState(false);
  const [paymentDialogOpen, setPaymentDialogOpen] = useState(false);
  const [selectedInstallmentForDueDateEdit, setSelectedInstallmentForDueDateEdit] = useState(null);
  const [selectedInstallmentForPayment, setSelectedInstallmentForPayment] = useState(null);
  const [newDueDate, setNewDueDate] = useState(null);
  const [newAmount, setNewAmount] = useState('');
  const [updateBoletoWithFees, setUpdateBoletoWithFees] = useState(false);
  const [updateBoletoOnly, setUpdateBoletoOnly] = useState(false);
  
  // Estados para pagamento
  const [paymentValue, setPaymentValue] = useState('');
  const [bankId, setBankId] = useState('2');
  const [paymentMethod, setPaymentMethod] = useState('');
  const [paymentObservation, setPaymentObservation] = useState('');
  const [paymentDate, setPaymentDate] = useState(null);
  const [juros, setJuros] = useState('0');
  const [descontos, setDescontos] = useState('0');

  // Logs de diagn√≥stico cr√≠tico
  // console.error('üö® INSTALLMENTS: COMPONENTE INICIADO');
  // window.debugInstallments.log('Componente iniciado');
  
  const { enqueueSnackbar } = useSnackbar();
  const [page, setPage] = useState(0);
  const [rowsPerPage, setRowsPerPage] = useState(10);
  const [installments, setInstallments] = useState([]);
  const [totalItems, setTotalItems] = useState(0);
  const [totalPages, setTotalPages] = useState(0);

  // Memoize complex states and calculations
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // Optimize filter states
  const [filters, setFilters] = useState({
    startDate: null,
    endDate: null,
    status: '',
    full_name: ''
  });

  // Estados de carregamento e erro
  const [isLoading, setIsLoading] = useState(false);
  const [fetchError, setFetchError] = useState(null);

  // Estados para startDate e endDate
  const [startDate, setStartDate] = useState(null);
  const [endDate, setEndDate] = useState(null);

  // Fun√ß√£o para renderizar o status da parcela
  const renderInstallmentStatus = useCallback((status, daysOverdue) => {
    let chipProps = {
      size: "small",
      variant: "outlined"
    };

    if (status === 'Pendente') {
      if (daysOverdue > 0) {
        chipProps = {
          ...chipProps,
          label: 'Atrasado',
          color: 'error',
          icon: <ErrorOutlineIcon />
        };
      } else {
        chipProps = {
          ...chipProps,
          label: 'Pendente',
          color: 'warning',
          icon: <PendingIcon />
        };
      }
    } else if (status === 'Pago') {
      chipProps = {
        ...chipProps,
        label: 'Pago',
        color: 'success',
        icon: <PaidIcon />
      };
    } else {
      chipProps = {
        ...chipProps,
        label: status || 'N√£o definido',
        color: 'default'
      };
    }

    return <Chip {...chipProps} />;
  }, []);

  // Memoize filtered installments
  const filteredInstallments = useMemo(() => {
    return installments.filter(installment => {
      const matchStatus = !filters.status || installment.status === filters.status;
      const matchFullName = !filters.full_name || 
        installment.full_name.toLowerCase().includes(filters.full_name.toLowerCase());
      
      return matchStatus && matchFullName;
    });
  }, [installments, filters]);

  // Otimizar fetchInstallments para incluir pagina√ß√£o corretamente
  const fetchInstallments = useCallback(async (params = {}) => {
    try {
      setIsLoading(true);
      console.log('üö® DEBUG Filtros antes da chamada:', {
        filters,
        page,
        rowsPerPage
      });

      // Garantir que startDate e endDate sempre tenham valores v√°lidos
      const currentDate = new Date();
      let safeStartDate, safeEndDate;

      if (filters.startDate && !isNaN(new Date(filters.startDate))) {
        safeStartDate = new Date(filters.startDate);
      } else {
        // Se n√£o houver data inicial v√°lida, usar o in√≠cio do m√™s atual
        safeStartDate = startOfMonth(currentDate);
      }

      if (filters.endDate && !isNaN(new Date(filters.endDate))) {
        safeEndDate = new Date(filters.endDate);
      } else {
        // Se n√£o houver data final v√°lida, usar o fim do m√™s atual
        safeEndDate = endOfMonth(currentDate);
      }

      // Validar se as datas s√£o v√°lidas
      if (isAfter(safeStartDate, safeEndDate)) {
        throw new Error('A data inicial n√£o pode ser posterior √† data final');
      }

      // Formatar datas para o formato esperado pela API (sem timezone)
      const formattedStartDate = format(startOfDay(safeStartDate), 'yyyy-MM-dd');
      const formattedEndDate = format(endOfDay(safeEndDate), 'yyyy-MM-dd');

      console.log('üö® Datas formatadas:', {
        formattedStartDate,
        formattedEndDate,
        safeStartDate: format(safeStartDate, 'yyyy-MM-dd HH:mm:ss'),
        safeEndDate: format(safeEndDate, 'yyyy-MM-dd HH:mm:ss')
      });

      // Remover par√¢metros nulos ou vazios
      const apiParams = {
        page: page + 1,
        limit: rowsPerPage,
        sort: 'due_date',
        order: 'desc',
        start_date: formattedStartDate,
        end_date: formattedEndDate,
        ...(filters.status && { status: filters.status }),
        ...(filters.full_name && { search: filters.full_name }),
        ...params // Permite sobrescrever par√¢metros se necess√°rio
      };

      // Remover par√¢metros duplicados ou desnecess√°rios
      delete apiParams.startDate;
      delete apiParams.endDate;
      delete apiParams.filters;

      console.log('üö® Par√¢metros finais da API:', apiParams);

      const response = await installmentsService.list(apiParams);

      // Garantir que temos uma resposta v√°lida
      if (!response) {
        throw new Error('Resposta da API inv√°lida');
      }

      console.log('üö® Resposta bruta da API:', {
        responseType: typeof response,
        data: response
      });

      // Processar resposta da API
      const items = response?.items || [];
      const meta = response?.meta || {};
      const total = meta.total || 0;
      const lastPage = meta.last_page || 1;

      console.log('üö® Resposta da API:', {
        items: items.length,
        total: total,
        lastPage: lastPage,
        meta: meta
      });

      // Atualizar estado com os dados da resposta
      setInstallments(items);
      setTotalItems(total);
      setTotalPages(lastPage);
      setFetchError(null);

      // Log de sucesso
      console.log('üö® Estado atualizado:', {
        installments: items.length,
        totalItems: total,
        totalPages: lastPage
      });

    } catch (error) {
      console.error('Erro ao buscar parcelas:', {
        message: error.message,
        response: error.response?.data,
        status: error.response?.status
      });
      
      setInstallments([]);
      setTotalItems(0);
      setTotalPages(0);
      
      const errorMessage = error.response?.data?.message || 
        error.response?.data?.error || 
        'Erro ao carregar parcelas. Por favor, tente novamente.';
      
      setFetchError(errorMessage);
      enqueueSnackbar(errorMessage, { variant: 'error' });
    } finally {
      setIsLoading(false);
    }
  }, [page, rowsPerPage, filters]);

  // Efeito para disparar fetchInstallments quando p√°gina ou filtros mudarem
  useEffect(() => {
    console.log('üö® EFEITO DE PAGINA√á√ÉO:', {
      page,
      rowsPerPage,
      startDate: filters.startDate,
      endDate: filters.endDate,
      status: filters.status,
      full_name: filters.full_name
    });

    fetchInstallments({
      page: page + 1,
      limit: rowsPerPage
    });
  }, [page, rowsPerPage, filters.startDate, filters.endDate, filters.status, filters.full_name]);

  useEffect(() => {
    // Definir filtro padr√£o para o m√™s atual
    const today = new Date();
    const firstDayOfMonth = startOfMonth(today);
    const lastDayOfMonth = endOfMonth(today);
    
    console.log('üö® CONFIGURANDO FILTRO PADR√ÉO PARA O M√äS ATUAL', {
      startDate: format(firstDayOfMonth, 'yyyy-MM-dd'),
      endDate: format(lastDayOfMonth, 'yyyy-MM-dd')
    });

    // Atualizar estados de data
    setStartDate(firstDayOfMonth);
    setEndDate(lastDayOfMonth);

    // Atualizar filtros
    setFilters(prev => ({
      ...prev,
      startDate: firstDayOfMonth,
      endDate: lastDayOfMonth
    }));

    // Buscar parcelas com o filtro padr√£o
    fetchInstallments({
      startDate: firstDayOfMonth,
      endDate: lastDayOfMonth
    });
  }, []);

  // Fun√ß√£o para lidar com mudan√ßas de data
  // Fun√ß√£o handleDateChange: Gerencia mudan√ßas de data com valida√ß√µes e atualiza√ß√µes s√≠ncronas
  // Objetivos:
  // 1. Garantir que a data inicial seja sempre anterior √† data final
  // 2. Atualizar estados de data de forma consistente
  // 3. Manter os filtros sincronizados com os estados de data
  // 4. Fornecer logs de depura√ß√£o para rastreamento
  const handleDateChange = useCallback((type, date) => {
    // Validar se a data final √© sempre posterior √† data inicial
    if (type === 'startDate' && date > endDate) {
      console.warn('üö® Data inicial n√£o pode ser posterior √† data final');
      return;
    }

    if (type === 'endDate' && date < startDate) {
      console.warn('üö® Data final n√£o pode ser anterior √† data inicial');
      return;
    }

    // Atualizar estado da data
    if (type === 'startDate') {
      setStartDate(date);
    } else {
      setEndDate(date);
    }

    // Atualizar filtros de forma s√≠ncrona
    setFilters(prevFilters => ({
      ...prevFilters,
      [type]: date
    }));

    console.log(`üö® Mudan√ßa de data ${type}:`, {
      newDate: date,
      startDate,
      endDate
    });
  }, [startDate, endDate]);

  // Renderiza√ß√£o condicional da tabela
  const renderInstallmentsTable = useMemo(() => {
    console.log('üö® Renderizando installments:', {
      items: installments.length,
      total: totalItems
    });

    if (isLoading) {
      return (
        <Box display="flex" justifyContent="center" alignItems="center" height={400}>
          <CircularProgress />
        </Box>
      );
    }

    if (fetchError) {
      return (
        <Box display="flex" flexDirection="column" justifyContent="center" alignItems="center" height={400}>
          <ErrorOutlineIcon color="error" sx={{ fontSize: 80, mb: 2 }} />
          <Typography variant="h6" color="error" gutterBottom>
            Erro ao carregar parcelas
          </Typography>
          <Typography variant="body2" color="textSecondary" align="center" sx={{ mb: 2 }}>
            {fetchError}
          </Typography>
          <Button 
            variant="contained" 
            color="primary" 
            onClick={fetchInstallments}
            startIcon={<RefreshIcon />}
          >
            Tentar Novamente
          </Button>
        </Box>
      );
    }

    // Verificar se n√£o h√° parcelas
    // Renderizar mensagem quando n√£o houver parcelas
    if (!installments || installments.length === 0) {
      return (
        <TableRow>
          <TableCell 
            colSpan={8} 
            sx={{ 
              border: 'none',
              height: '400px',
              p: 4
            }}
          >
            <Stack 
              direction="column" 
              alignItems="center" 
              justifyContent="center" 
              spacing={2}
              sx={{ 
                height: '100%',
                textAlign: 'center'
              }}
            >
              <SentimentDissatisfiedIcon 
                color="disabled" 
                sx={{ fontSize: 80 }} 
              />
              <Typography 
                variant="h6" 
                color="textSecondary" 
              >
                Nenhuma parcela encontrada
              </Typography>
              <Typography 
                variant="body2" 
                color="textSecondary" 
                align="center"
              >
                N√£o h√° parcelas que correspondam aos filtros selecionados.
              </Typography>
            </Stack>
          </TableCell>
        </TableRow>
      );
    }

    return (installments || []).map(installment => {
      // Log completo do registro
      console.log('üö® REGISTRO COMPLETO:', {
        ...installment,
        due_date_original: installment.due_date,
        due_date_formatted: safeFormatDate(installment.due_date)
      });

      return (
        <TableRow key={installment.installment_id} hover>
          <TableCell padding="checkbox">
            <Checkbox 
              checked={false} 
              onChange={() => {}}
            />
          </TableCell>
          <TableCell>{installment.installment_id}</TableCell>
          <TableCell>{installment.movement_id}</TableCell>
          <TableCell>{installment.full_name}</TableCell>
          <TableCell>
            {safeFormatDate(installment.due_date)}
          </TableCell>
          <TableCell>R$ {formatCurrency(installment.amount)}</TableCell>
          <TableCell>
            {renderInstallmentStatus(installment.status)}
          </TableCell>
          <TableCell>
            <Stack direction="row" spacing={1}>
              {(installment.boletos || []).map((boleto) => 
                boleto.status === 'A_RECEBER' && (
                  <IconButton 
                    key={boleto.boleto_id}
                    size="small" 
                    onClick={() => window.open(boleto.boleto_url, '_blank')}
                    title="Visualizar Boleto"
                  >
                    <ReceiptIcon fontSize="small" />
                  </IconButton>
                )
              )}
            </Stack>
          </TableCell>
          <TableCell align="right">
            <Box sx={{ 
              display: 'flex', 
              gap: 1,
              alignItems: 'center',
              justifyContent: 'flex-end' 
            }}>
              {/* Bot√£o de Gerar Boleto */}
              {installment.status === 'Pendente' && 
               (!installment.boletos || 
                !installment.boletos.some(boleto => boleto?.status === 'A_RECEBER')) && (
                <IconButton 
                  size="small"
                  color="primary"
                  onClick={() => handleGenerateBoleto(installment)} 
                  title="Gerar Boleto"
                  sx={{ 
                    border: '1px solid', 
                    borderColor: 'primary.light',
                    '&:hover': { 
                      bgcolor: 'primary.light', 
                      color: 'primary.contrastText' 
                    }
                  }}
                >
                  <Add fontSize="small" />
                </IconButton>
              )}

              {/* Bot√£o de Notifica√ß√£o */}
              {console.log('üö® CONDI√á√ïES DE NOTIFICA√á√ÉO:', {
                installmentId: installment.installment_id,
                status: installment.status,
                boletosLength: installment.boletos?.length,
                boletosAReceber: installment.boletos?.some(boleto => boleto?.status === 'A_RECEBER')
              })}
              {installment.status === 'Pendente' && 
               installment.boletos && 
               installment.boletos.length > 0 && 
               installment.boletos.some(boleto => boleto?.status === 'A_RECEBER') && (
                <IconButton 
                  size="small"
                  color="warning"
                  onClick={() => handleNotifyInstallment(installment)} 
                  disabled={false}
                  title="Notificar Boleto Pendente"
                  sx={{ 
                    border: '1px solid', 
                    borderColor: 'warning.light',
                    '&:hover': { 
                      bgcolor: 'warning.light', 
                      color: 'warning.contrastText' 
                    }
                  }}
                >
                  <NotificationsIcon fontSize="small" />
                </IconButton>
              )}

              {/* Bot√£o de Liquidar */}
              {installment.status === 'Pendente' && (
                <IconButton 
                  size="small"
                  color="success"
                  onClick={() => {
                    setSelectedInstallmentForPayment(installment);
                    const valorPagamento = formatCurrency(installment.balance || installment.amount);
                    setPaymentValue(valorPagamento);
                    setPaymentMethod('');
                    setPaymentObservation('');
                    setBankId('2');
                    setPaymentDate(new Date());
                    setJuros('0');
                    setDescontos('0');
                    setPaymentDialogOpen(true);
                  }}
                  title="Liquidar Parcela"
                  sx={{ 
                    border: '1px solid', 
                    borderColor: 'success.light',
                    '&:hover': { 
                      bgcolor: 'success.light', 
                      color: 'success.contrastText' 
                    }
                  }}
                >
                  <CheckCircleIcon fontSize="small" />
                </IconButton>
              )}

              {/* Bot√£o de Alterar Vencimento */}
              {installment.status === 'Pendente' && (
                <IconButton 
                  size="small"
                  color="primary"
                  onClick={() => handleEditDueDate(installment)}
                  title="Alterar Vencimento"
                  sx={{ 
                    border: '1px solid', 
                    borderColor: 'primary.light',
                    '&:hover': { 
                      bgcolor: 'primary.light', 
                      color: 'primary.contrastText' 
                    }
                  }}
                >
                  <EventIcon fontSize="small" />
                </IconButton>
              )}
            </Box>
          </TableCell>
        </TableRow>
      );
    });
  }, [installments, isLoading, fetchError]);

  // Fun√ß√£o para calcular juros e multa
  const calculateInterestAndPenalty = useCallback((originalDueDate, newDueDate, originalBalance) => {
    console.log('üö® C√ÅLCULO DE JUROS E MULTA:', {
      originalDueDate,
      newDueDate,
      originalBalance
    });

    // Converte para Date se for string
    const originalDate = typeof originalDueDate === 'string' 
      ? new Date(originalDueDate) 
      : originalDueDate;
    const calculatedNewDate = typeof newDueDate === 'string' 
      ? new Date(newDueDate) 
      : newDueDate;

    // Calcula dias de atraso
    const daysOverdue = differenceInDays(calculatedNewDate, originalDate);
    console.log('üö® DIAS DE ATRASO:', daysOverdue);

    // Define taxas de juros e multa
    const interestRate = 0.01; // 1% ao m√™s
    const penaltyRate = 0.02; // 2% de multa

    // Calcula juros e multa
    const dailyInterestRate = interestRate / 30;
    const interest = originalBalance * (dailyInterestRate * daysOverdue);
    const penalty = originalBalance * penaltyRate;
    const totalNewBalance = originalBalance + interest + penalty;

    console.log('üö® DETALHES DO C√ÅLCULO:', {
      interest,
      penalty,
      totalNewBalance
    });

    return {
      interest,
      penalty,
      totalNewBalance
    };
  }, []);

  // Fun√ß√£o auxiliar para calcular e formatar novo valor com juros
  const handleCalculateNewAmount = useCallback((installment, newDueDate, updateWithFees) => {
    console.log('üö® C√ÅLCULO DE NOVO VALOR:', {
      installment,
      newDueDate,
      updateWithFees
    });

    if (!updateWithFees) {
      console.log('üö® RETORNANDO VALOR ORIGINAL:', formatCurrency(installment.balance));
      return formatCurrency(installment.balance);
    }

    const newBalance = calculateInterestAndPenalty(
      installment.due_date, 
      newDueDate, 
      parseFloat(cleanCurrencyValue(installment.balance))
    );

    console.log('üö® NOVO VALOR CALCULADO:', formatCurrency(newBalance));
    return formatCurrency(newBalance);
  }, [calculateInterestAndPenalty]);

  const handleChangePage = useCallback((event, newPage) => {
    console.log('üö® MUDAN√áA DE P√ÅGINA:', {
      currentPage: page,
      newPage: newPage
    });
    setPage(newPage);
    fetchInstallments();
  }, [page, fetchInstallments]);

  const handleChangeRowsPerPage = useCallback((event) => {
    const newRowsPerPage = parseInt(event.target.value, 10);
    console.log('üö® MUDAN√áA DE LINHAS POR P√ÅGINA:', {
      currentRowsPerPage: rowsPerPage,
      newRowsPerPage: newRowsPerPage
    });
    setRowsPerPage(newRowsPerPage);
    setPage(0); // Resetar para primeira p√°gina
    fetchInstallments();
  }, [rowsPerPage, fetchInstallments]);

  const calculateInstallmentsSummary = useCallback((installmentsData) => {
    let totalReceivable = 0;
    let totalReceived = 0;
    let totalOverdue = 0;

    installmentsData.forEach(installment => {
      const amount = installment.amount || 0;
      
      switch (installment.status) {
        case 'Pago':
          totalReceived += amount;
          break;
        case 'Vencido':
          totalOverdue += amount;
          break;
        default:
          totalReceivable += amount;
      }
    });

    return {
      totalReceivable,
      totalReceived,
      totalOverdue
    };
  }, []);

  const installmentsSummary = useMemo(() => {
    return calculateInstallmentsSummary(installments);
  }, [installments]);

  const handleSelectAllInstallments = (event) => {
    // console.log('Sele√ß√£o de todas as parcelas:', event.target.checked);
    if (event.target.checked) {
      const allInstallmentIds = installments.map(item => item.installment_id);
      // setSelectedInstallments(allInstallmentIds);
    } else {
      // setSelectedInstallments([]);
    }
  };

  const handleSelectInstallment = (installmentId) => {
    // console.log('Sele√ß√£o de parcela:', installmentId);
    // setSelectedInstallments(prev => 
    //   prev.includes(installmentId)
    //     ? prev.filter(id => id !== installmentId)
    //     : [...prev, installmentId]
    // );
  };

  const handleNotifySelectedInstallments = async () => {
    // console.log('Notifica√ß√£o de parcelas selecionadas:', selectedInstallments);
    // if (selectedInstallments.length === 0) {
    //   enqueueSnackbar('Nenhuma parcela selecionada', { variant: 'warning' });
    //   return;
    // }

    // setIsNotifyingSelected(true);

    // try {
    //   const notificationPromises = selectedInstallments.map(installmentId => 
    //     axios.post(
    //       'https://n8n.webhook.agilefinance.com.br/webhook/mensagem/parcela', 
    //       { installment_id: installmentId },
    //       {
    //         headers: {
    //           'apikey': 'ffcaa89a3e19bd98e911475c7974309b',
    //           'Content-Type': 'application/json'
    //         }
    //       }
    //     )
    //   );

    //   // Simula um tempo de processamento
    //   await new Promise(resolve => setTimeout(resolve, 1500));

    //   await Promise.all(notificationPromises);
      
    //   enqueueSnackbar(`Notifica√ß√£o enviada para ${selectedInstallments.length} parcela(s)`, { 
    //     variant: 'success',
    //     autoHideDuration: 2000 // Tempo espec√≠fico para auto-hide
    //   });
      
    //   // setSelectedInstallments([]); // Limpa sele√ß√£o ap√≥s notifica√ß√£o
    // } catch (error) {
    //   // console.error('Erro ao enviar notifica√ß√µes:', error);
    //   enqueueSnackbar('Erro ao enviar notifica√ß√µes', { variant: 'error' });
    // } finally {
    //   setIsNotifyingSelected(false);
    // }
  };

  const handleGenerateBoleto = useCallback(async (installment) => {
    // Valida√ß√µes iniciais
    if (!installment?.installment_id) {
      console.error('üö® Tentativa de gerar boleto sem parcela v√°lida:', installment);
      enqueueSnackbar('Erro: Dados da parcela inv√°lidos', { 
        variant: 'error',
        autoHideDuration: 5000
      });
      return;
    }

    // Valida status da parcela
    if (installment.status !== 'Pendente') {
      enqueueSnackbar('Boleto s√≥ pode ser gerado para parcelas pendentes', { 
        variant: 'warning',
        autoHideDuration: 5000
      });
      return;
    }

    // Verifica se j√° existe boleto
    if (installment.boletos?.length > 0) {
      enqueueSnackbar('Esta parcela j√° possui um boleto gerado', { 
        variant: 'info',
        autoHideDuration: 5000
      });
      return;
    }

    try {
      setIsLoading(true);
      
      console.log('üö® Iniciando gera√ß√£o de boleto:', {
        installmentId: installment.installment_id,
        status: installment.status,
        dueDate: installment.due_date,
        amount: installment.amount
      });

      // Tenta gerar o boleto
      const response = await installmentsService.generateBoleto(installment.installment_id);
      
      // Valida a resposta
      if (!response?.boleto_id) {
        throw new Error('Resposta inv√°lida: boleto n√£o foi gerado corretamente');
      }

      console.log('üö® Boleto gerado com sucesso:', {
        boletoId: response.boleto_id,
        boletoNumber: response.boleto_number,
        dueDate: response.due_date
      });
      
      // Atualiza a lista de parcelas
      await fetchInstallments();
      
      enqueueSnackbar('Boleto gerado com sucesso!', { 
        variant: 'success',
        autoHideDuration: 3000
      });
    } catch (error) {
      console.error('üö® Erro detalhado ao gerar boleto:', {
        name: error.name,
        message: error.message,
        code: error.code,
        response: error.response?.data,
        status: error.response?.status
      });
      
      // Mensagem de erro amig√°vel para o usu√°rio
      const errorMessage = error.message || 'Erro ao gerar boleto. Tente novamente.';

      enqueueSnackbar(errorMessage, { 
        variant: 'error',
        autoHideDuration: 5000
      });
    } finally {
      setIsLoading(false);
    }
  }, [enqueueSnackbar, fetchInstallments]);

  const handleEditDueDate = useCallback((installment) => {
    console.log('üö® INICIANDO EDI√á√ÉO DE VENCIMENTO:', installment);

    // Limpa o valor original do balance
    const originalBalance = parseFloat(cleanCurrencyValue(installment.amount));

    // Configura a data original e a nova data
    const originalDueDate = new Date(installment.due_date);
    const newDueDate = isPast(originalDueDate) ? new Date() : originalDueDate;

    // Calcula juros e multa se a data original estiver no passado
    let newBalance = originalBalance;
    let interestDetails = { interest: 0, penalty: 0 };
    
    if (isPast(originalDueDate)) {
      interestDetails = calculateInterestAndPenalty(originalDueDate, newDueDate, originalBalance);
      newBalance = interestDetails.totalNewBalance;
    }

    console.log('üö® DETALHES DE EDI√á√ÉO DE VENCIMENTO:', {
      originalBalance,
      newBalance,
      interestDetails
    });

    // Atualiza o estado para abertura do modal
    setSelectedInstallmentForDueDateEdit(installment);
    setNewDueDate(newDueDate);
    
    // Define o novo valor no input
    setNewAmount(formatCurrency(newBalance));
    
    // Define se deve atualizar com juros
    setUpdateBoletoWithFees(isPast(originalDueDate));
    setUpdateBoletoOnly(isPast(originalDueDate));
    
    // Abre o modal com o novo valor calculado
    setEditDueDateDialogOpen(true);
  }, [calculateInterestAndPenalty, cleanCurrencyValue, formatCurrency, isPast]);

  const handleUpdateDueDate = async (installmentId, newDueDate, newAmount, updateBoletoWithFees, updateBoletoOnly) => {
    // console.log('Atualiza√ß√£o de data de vencimento:', {
    //   installmentId,
    //   newDueDate,
    //   newAmount,
    //   updateBoletoWithFees,
    //   updateBoletoOnly
    // });
    try {
      // Ativa o estado de carregamento
      // setIsUpdatingDueDate(true);

      // Converte a data para o formato ISO
      const formattedDueDate = format(newDueDate, 'yyyy-MM-dd');

      // console.log('Iniciando atualiza√ß√£o de data de vencimento:', { 
      //   installmentId, 
      //   newDueDate: formattedDueDate, 
      //   newAmount,
      //   updateBoletoWithFees,
      //   updateBoletoOnly,
      //   apiSource: 'N8N' 
      // });

      // Usa N8N como API principal para este submite espec√≠fico
      const result = await updateInstallmentDueDate(installmentId, formattedDueDate, newAmount, updateBoletoWithFees, updateBoletoOnly, 'N8N');
      
      // console.log('Resultado da atualiza√ß√£o de data de vencimento:', result);

      // Atualiza o estado local ou mostra feedback
      enqueueSnackbar('Data de vencimento atualizada com sucesso!', { variant: 'success' });
      
      // Recarrega os dados de installments
      await fetchInstallments();

      // Fecha o modal de edi√ß√£o de data
      setEditDueDateDialogOpen(false);
    } catch (error) {
      // console.error('Erro detalhado ao atualizar data de vencimento:', {
      //   message: error.message,
      //   response: error.response?.data,
      //   status: error.response?.status
      // });
      enqueueSnackbar('Erro ao atualizar data de vencimento', { variant: 'error' });
    } finally {
      // Desativa o estado de carregamento
      // setIsUpdatingDueDate(false);
    }
  };

  const handleOpenPaymentDialog = (installment) => {
    // S√≥ abre para status Pendente
    if (installment.status !== 'Pendente') return;

    setSelectedInstallmentForPayment(installment);
    setPaymentValue(formatCurrency(installment.amount));
    setPaymentMethod('');
    setPaymentObservation('');
    setBankId('2');
    setPaymentDate(new Date());
    setJuros('0');
    setDescontos('0');
    setPaymentDialogOpen(true);
  };

  const handleConfirmPayment = async () => {
    try {
      // Validar campos obrigat√≥rios
      if (!selectedInstallmentForPayment || !paymentValue) {
        enqueueSnackbar('Preencha todos os campos obrigat√≥rios', { variant: 'warning' });
        return;
      }

      const paymentData = {
        valor: cleanCurrencyValue(paymentValue),
        date: format(paymentDate || new Date(), 'yyyy-MM-dd'),
        bank_id: parseInt(bankId || '2', 10),
        juros: cleanCurrencyValue(juros),
        descontos: cleanCurrencyValue(descontos)
      };

      console.log('üö® Dados de pagamento:', {
        installmentId: selectedInstallmentForPayment.installment_id,
        paymentData
      });

      // Chamar servi√ßo de pagamento
      const result = await api.put(`/installments/${selectedInstallmentForPayment.installment_id}/payment`, paymentData);
      
      console.log('‚úÖ Resposta do pagamento:', result);

      enqueueSnackbar('Pagamento confirmado com sucesso!', { variant: 'success' });
      fetchInstallments();
      setPaymentDialogOpen(false);
    } catch (error) {
      console.error('‚ùå Erro no pagamento:', error);
      enqueueSnackbar(`Erro ao confirmar pagamento: ${error.response?.data?.message || error.message}`, { variant: 'error' });
    } finally {
      // Limpar estados
      setBankId('2');
      setJuros('0');
      setDescontos('0');
      setPaymentMethod('');
      setPaymentObservation('');
      setSelectedInstallmentForPayment(null);
    }
  };

  const getQuickDateRanges = () => {
    console.log('üö® OBTENDO FAIXAS DE DATAS R√ÅPIDAS');
    const today = new Date();
    return [
      {
        label: 'Hoje',
        startDate: today,
        endDate: today,
        onClick: () => {
          console.log('üö® CLICOU EM HOJE');
          handleQuickDateFilter('Hoje');
        }
      },
      {
        label: 'Semana Atual',
        startDate: startOfWeek(today, { locale: ptBR }),
        endDate: endOfWeek(today, { locale: ptBR }),
        onClick: () => {
          console.log('üö® CLICOU EM SEMANA ATUAL');
          handleQuickDateFilter('Esta Semana');
        }
      },
      {
        label: 'M√™s Atual',
        startDate: startOfMonth(today),
        endDate: endOfMonth(today),
        onClick: () => {
          console.log('üö® CLICOU EM M√äS ATUAL');
          handleQuickDateFilter('Este M√™s');
        }
      },
      {
        label: '√öltimos 7 dias',
        startDate: subDays(today, 6),
        endDate: today,
        onClick: () => {
          console.log('üö® CLICOU EM √öLTIMOS 7 DIAS');
          handleQuickDateFilter('√öltimos 7 dias');
        }
      },
      {
        label: '√öltimos 30 dias',
        startDate: subDays(today, 29),
        endDate: today,
        onClick: () => {
          console.log('üö® CLICOU EM √öLTIMOS 30 DIAS');
          handleQuickDateFilter('√öltimos 30 dias');
        }
      }
    ];
  };

  const handleQuickDateFilter = useCallback((type) => {
    try {
      console.log('üö® INICIANDO FILTRO R√ÅPIDO:', type);

      let newStartDate = null;
      let newEndDate = null;

      const today = new Date();
      today.setHours(0, 0, 0, 0);

      switch (type) {
        case 'Hoje':
          newStartDate = startOfDay(today);
          newEndDate = endOfDay(today);
          break;
        case 'Esta Semana':
          newStartDate = startOfWeek(today, { weekStartsOn: 1 }); // Segunda-feira
          newEndDate = endOfWeek(today, { weekStartsOn: 1 });
          break;
        case 'Este M√™s':
          newStartDate = startOfMonth(today);
          newEndDate = endOfMonth(today);
          break;
        case '√öltimos 7 Dias':
          newStartDate = startOfDay(subDays(today, 6));
          newEndDate = endOfDay(today);
          break;
        case '√öltimos 30 Dias':
          newStartDate = startOfDay(subDays(today, 29));
          newEndDate = endOfDay(today);
          break;
        default:
          console.warn('üö® Tipo de filtro r√°pido n√£o reconhecido:', type);
          return;
      }

      // Validar datas
      if (!newStartDate || !newEndDate || isNaN(newStartDate.getTime()) || isNaN(newEndDate.getTime())) {
        throw new Error('Datas calculadas inv√°lidas para o filtro: ' + type);
      }

      console.log('üö® DATAS CALCULADAS:', { 
        type, 
        startDate: format(newStartDate, 'yyyy-MM-dd HH:mm:ss'),
        endDate: format(newEndDate, 'yyyy-MM-dd HH:mm:ss')
      });

      // Atualiza os estados de data e filtros
      setStartDate(newStartDate);
      setEndDate(newEndDate);
      setFilters(prev => ({
        ...prev,
        startDate: newStartDate,
        endDate: newEndDate
      }));

      // Dispara busca com novos filtros
      fetchInstallments();
    } catch (error) {
      console.error('üö® Erro ao aplicar filtro r√°pido:', error);
      enqueueSnackbar('Erro ao aplicar filtro de data: ' + error.message, { 
        variant: 'error',
        autoHideDuration: 5000
      });
    }
  }, [enqueueSnackbar, fetchInstallments]);







  const handleClearDateFilter = useCallback(() => {
    setFilters(prev => ({
      ...prev,
      startDate: null,
      endDate: null
    }));
    setStartDate(null);
    setEndDate(null);
    fetchInstallments();
  }, [fetchInstallments]);

  const renderBoletoStatus = (status) => {
    // console.log('Renderizando status de boleto:', status);
    const statusColors = {
      'A_RECEBER': 'info',
      'EXPIRADO': 'error',
    };
    return <Chip 
      label={status} 
      color={statusColors[status] || 'default'} 
      size="small" 
      variant="outlined" 
    />;
  };

  const formatDateDisplay = (dateString) => {
    // console.log('Formatando data para exibi√ß√£o:', dateString);
    if (!dateString) return '';
    
    // Extrai apenas a parte da data sem convers√£o
    const datePart = dateString.split('T')[0];
    const [year, month, day] = datePart.split('-');
    
    // Mapeamento de meses para abrevia√ß√µes
    const monthAbbreviations = {
      '01': 'jan', '02': 'fev', '03': 'mar', '04': 'abr', 
      '05': 'mai', '06': 'jun', '07': 'jul', '08': 'ago', 
      '09': 'set', '10': 'out', '11': 'nov', '12': 'dez'
    };
    
    return `${day} ${monthAbbreviations[month]} ${year}`;
  };

  const handleNotifyInstallment = async (installment) => {
    console.log('üö® NOTIFICANDO PARCELA:', {
      installment_id: installment.installment_id,
      status: installment.status,
      boletos: installment.boletos?.map(boleto => ({
        boleto_id: boleto.boleto_id,
        status: boleto.status,
        boleto_number: boleto.boleto_number
      })),
      full_name: installment.full_name,
      due_date: installment.due_date
    });

    try {
      console.log('üö® PREPARANDO ENVIO DE NOTIFICA√á√ÉO');
      const notificationPayload = {
        installment_id: installment.installment_id,
        full_name: installment.full_name,
        amount: installment.amount,
        due_date: installment.due_date,
        boleto_number: installment.boletos?.[0]?.boleto_number
      };
      const response = await axios.post('https://n8n.webhook.agilefinance.com.br/webhook/mensagem/parcela', notificationPayload, {
        headers: {
          'apikey': 'ffcaa89a3e19bd98e911475c7974309b',
          'Content-Type': 'application/json'
        },
        timeout: 5000  // Timeout de 5 segundos
      });
      
      console.log('üö® RESPOSTA DA NOTIFICA√á√ÉO:', response);

      // Simula um tempo de processamento
      await new Promise(resolve => setTimeout(resolve, 1000));

      enqueueSnackbar('Notifica√ß√£o enviada com sucesso!', { variant: 'success' });
    } catch (error) {
      console.error('üö® ERRO AO ENVIAR NOTIFICA√á√ÉO:', {
        message: error.message,
        config: error.config,
        code: error.code,
        response: error.response,
        request: error.request
      });
      enqueueSnackbar('Erro ao enviar notifica√ß√£o', { variant: 'error' });
    }
  };

  const handleShareClick = (event, installment = null) => {
    // console.log('Clicando no bot√£o de compartilhamento:', event, installment);
  };

  const handleShareClose = () => {
    // console.log('Fechando o menu de compartilhamento');
  };

  const handleWhatsAppShare = () => {
    // console.log('Compartilhando via WhatsApp');
  };

  const handleEmailShare = () => {
    // console.log('Compartilhando via Email');
  };

  const normalizeCurrencyValue = (value) => {
    // Remove caracteres n√£o num√©ricos
    const numericValue = parseFloat(
      (typeof value === 'string' 
        ? value.replace(/[^\d,\.]/g, '').replace(',', '.')
        : value
      )
    );
    
    return numericValue >= 1000 ? numericValue / 100 : numericValue;
  };

  const convertBRLToNumber = (value) => {
    // Remove pontos de milhar e substitui v√≠rgula por ponto
    const cleanedValue = value.replace(/\./g, '').replace(',', '.');
    return parseFloat(cleanedValue);
  };

  const isOverdueDate = false; // selectedInstallmentForDueDateEdit?.due_date && newDueDate && 
    // (
    //   // Nova data posterior √† data original
    //   differenceInDays(newDueDate, new Date(selectedInstallmentForDueDateEdit.due_date)) > 0 ||
    //   // Parcela j√° est√° vencida
    //   isPast(new Date(selectedInstallmentForDueDateEdit.due_date))
    // );

  const handleUpdateDueDateWithInterestAndPenalty = useCallback(async (
    installmentId, 
    newDueDate, 
    newAmount, 
    updateBoletoWithFees, 
    updateBoletoOnly
  ) => {
    try {
      // Usa N8N como API principal para este submite espec√≠fico
      const result = await updateInstallmentDueDate(
        installmentId, 
        format(newDueDate, 'yyyy-MM-dd'), 
        newAmount, 
        updateBoletoWithFees, 
        updateBoletoOnly, 
        'N8N',
        { 
          // Garante que apenas a atualiza√ß√£o de boleto seja enviada no submit √∫nico
          update_boleto_only: updateBoletoOnly 
        }
      );
      
      // Atualiza o estado local ou mostra feedback
      enqueueSnackbar('Data de vencimento atualizada com sucesso!', { variant: 'success' });
      
      // Recarrega os dados de installments
      await fetchInstallments();

      // Fecha o modal de edi√ß√£o de data
      setEditDueDateDialogOpen(false);
    } catch (error) {
      enqueueSnackbar('Erro ao atualizar data de vencimento', { variant: 'error' });
      console.error('Erro na atualiza√ß√£o:', error);
    }
  }, [enqueueSnackbar, fetchInstallments, setEditDueDateDialogOpen]);

  return (
    <Box sx={{ width: '100%', p: 2 }}>
      {/* <Box sx={{ 
        display: 'flex', 
        alignItems: 'center', 
        justifyContent: 'space-between', 
        backgroundColor: 'rgba(0, 0, 0, 0.1)', 
        padding: 1, 
        borderRadius: 1,
        marginBottom: 2
      }}>
        <Typography variant="body2">
          {selectedInstallments.length} parcela(s) selecionada(s)
        </Typography>
        <Button 
          variant="contained" 
          color="primary" 
          startIcon={<NotificationsIcon />}
          onClick={handleNotifySelectedInstallments}
          disabled={isNotifyingSelected}
        >
          {isNotifyingSelected ? (
            <CircularProgress size={24} />
          ) : (
            'Notificar Selecionadas'
          )}
        </Button>
      </Box> */}
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
        <Typography variant="h4">Contas a Receber</Typography>
      </Box>

      <Grid container spacing={2} sx={{ mb: 3 }}>
        <Grid item xs={12} md={4}>
          <Paper 
            elevation={3} 
            sx={{ 
              p: 2, 
              display: 'flex', 
              alignItems: 'center', 
              bgcolor: 'background.default',
              transition: 'transform 0.3s',
              '&:hover': { transform: 'scale(1.02)' }
            }}
          >
            <Box sx={{ 
              bgcolor: 'primary.light', 
              color: 'primary.contrastText', 
              borderRadius: 2, 
              p: 1, 
              mr: 2 
            }}>
              <MoneyIcon />
            </Box>
            <Box>
              <Typography variant="subtitle1" color="text.secondary">
                Total de Parcelas
              </Typography>
              <Typography variant="h5" fontWeight="bold">
                R$ {formatCurrency(installmentsSummary.totalReceivable)}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                {installments.length} parcelas
              </Typography>
            </Box>
          </Paper>
        </Grid>

        <Grid item xs={12} md={4}>
          <Paper 
            elevation={3} 
            sx={{ 
              p: 2, 
              display: 'flex', 
              alignItems: 'center', 
              bgcolor: 'background.default',
              transition: 'transform 0.3s',
              '&:hover': { transform: 'scale(1.02)' }
            }}
          >
            <Box sx={{ 
              bgcolor: 'warning.light', 
              color: 'warning.contrastText', 
              borderRadius: 2, 
              p: 1, 
              mr: 2 
            }}>
              <PendingIcon />
            </Box>
            <Box>
              <Typography variant="subtitle1" color="text.secondary">
                Parcelas Pendentes
              </Typography>
              <Typography variant="h5" fontWeight="bold" color="warning.main">
                R$ {formatCurrency(installmentsSummary.totalReceivable)}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                {installments.filter(item => item.status === 'Pendente').length} parcelas
              </Typography>
            </Box>
          </Paper>
        </Grid>

        <Grid item xs={12} md={4}>
          <Paper 
            elevation={3} 
            sx={{ 
              p: 2, 
              display: 'flex', 
              alignItems: 'center', 
              bgcolor: 'background.default',
              transition: 'transform 0.3s',
              '&:hover': { transform: 'scale(1.02)' }
            }}
          >
            <Box sx={{ 
              bgcolor: 'success.light', 
              color: 'success.contrastText', 
              borderRadius: 2, 
              p: 1, 
              mr: 2 
            }}>
              <PaidIcon />
            </Box>
            <Box>
              <Typography variant="subtitle1" color="text.secondary">
                Parcelas Pagas
              </Typography>
              <Typography variant="h5" fontWeight="bold" color="success.main">
                R$ {formatCurrency(installmentsSummary.totalReceived)}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                {installments.filter(item => item.status === 'Pago').length} parcelas
              </Typography>
            </Box>
          </Paper>
        </Grid>
      </Grid>

      <Grid container spacing={2} alignItems="center" sx={{ mb: 2 }}>
        <Grid item>
          <LocalizationProvider dateAdapter={AdapterDateFns} locale={ptBR}>
            <DatePicker
              label="Data Inicial"
              value={startDate}
              onChange={(newValue) => handleDateChange('startDate', newValue)}
              slots={{
                textField: TextField
              }}
              slotProps={{
                textField: {
                  variant: 'outlined',
                  fullWidth: true,
                  margin: 'normal'
                }
              }}
              format="dd/MM/yyyy"
            />
          </LocalizationProvider>
        </Grid>
        <Grid item>
          <LocalizationProvider dateAdapter={AdapterDateFns} locale={ptBR}>
            <DatePicker
              label="Data Final"
              value={endDate}
              onChange={(newValue) => handleDateChange('endDate', newValue)}
              slots={{
                textField: TextField
              }}
              slotProps={{
                textField: {
                  variant: 'outlined',
                  fullWidth: true,
                  margin: 'normal'
                }
              }}
              format="dd/MM/yyyy"
            />
          </LocalizationProvider>
        </Grid>
        <Grid item>
          <FormControl size="small" sx={{ minWidth: 120 }}>
            <InputLabel>Status</InputLabel>
            <Select
              value={filters.status}
              label="Status"
              onChange={(e) => setFilters(prev => ({ ...prev, status: e.target.value }))}
            >
              <MenuItem value="">Nenhum</MenuItem>
              <MenuItem value="Pendente">Pendente</MenuItem>
              <MenuItem value="Pago">Pago</MenuItem>
            </Select>
          </FormControl>
        </Grid>
        <Grid item>
          <TextField
            label="Nome"
            value={filters.full_name}
            onChange={(e) => setFilters(prev => ({ ...prev, full_name: e.target.value }))}
            size="small"
            InputProps={{
              startAdornment: (
                <InputAdornment position="start">
                  <SearchIcon />
                </InputAdornment>
              ),
            }}
          />
        </Grid>
        <Grid item>
          <Box sx={{ display: 'flex', gap: 1 }}>
            {getQuickDateRanges().map((range) => (
              <Button 
                key={range.label}
                variant="outlined" 
                size="small"
                color={
                  filters.startDate && filters.endDate && 
                  isSameDay(filters.startDate, range.startDate) && 
                  isSameDay(filters.endDate, range.endDate) 
                    ? 'primary' 
                    : 'secondary'
                }
                onClick={range.onClick}
              >
                {range.label}
              </Button>
            ))}
            <Button 
              variant="outlined" 
              size="small"
              color="secondary"
              onClick={handleClearDateFilter}
            >
              Limpar
            </Button>
          </Box>
        </Grid>
      </Grid>

      <TableContainer component={Paper} elevation={3}>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell padding="checkbox" align="center">
                <Checkbox 
                  onChange={handleSelectAllInstallments} 
                  checked={false}
                />
              </TableCell>
              <TableCell align="center">ID Parcela</TableCell>
              <TableCell align="center">ID Movimento</TableCell>
              <TableCell align="left">Nome</TableCell>
              <TableCell align="center">Data Vencimento</TableCell>
              <TableCell align="right">Valor</TableCell>
              <TableCell align="center">Status</TableCell>
              <TableCell align="center">Boletos</TableCell>
              <TableCell align="center">A√ß√µes</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {isLoading ? (
              <TableRow>
                <TableCell colSpan={9} align="center" sx={{ py: 3 }}>
                  <CircularProgress />
                </TableCell>
              </TableRow>
            ) : installments.length === 0 ? (
              <TableRow>
                <TableCell colSpan={9} align="center" sx={{ py: 3 }}>
                  <Typography variant="body1" color="textSecondary">
                    Nenhuma parcela encontrada
                  </Typography>
                </TableCell>
              </TableRow>
            ) : (
              renderInstallmentsTable
            )}
          </TableBody>
        </Table>
      </TableContainer>

      <TablePagination
        rowsPerPageOptions={[5, 10, 25, 50]}
        component="div"
        count={totalItems}
        rowsPerPage={rowsPerPage}
        page={page}
        onPageChange={handleChangePage}
        onRowsPerPageChange={handleChangeRowsPerPage}
        labelRowsPerPage="Linhas por p√°gina"
        labelDisplayedRows={({ from, to, count }) => 
          `${from}-${to} de ${count !== -1 ? count : `mais de ${to}`}`
        }
        showFirstButton
        showLastButton
      />
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mt: 2 }}>
        <Typography variant="h6">Resumo:</Typography>
        <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-end' }}>
          <Typography variant="body1">
            Total: R$ {formatCurrency(installmentsSummary.totalReceivable)}
          </Typography>
          <Typography variant="body1">
            Pendente: R$ {formatCurrency(installmentsSummary.totalReceivable)}
          </Typography>
          <Typography variant="body1">
            Pago: R$ {formatCurrency(installmentsSummary.totalReceived)}
          </Typography>
        </Box>
      </Box>
      <Dialog
        open={editDueDateDialogOpen}
        onClose={() => {
          setEditDueDateDialogOpen(false);
        }}
        maxWidth="md"
        fullWidth
      >
        {console.log('üö® ESTADO DO MODAL:', {
          editDueDateDialogOpen,
          selectedInstallmentForDueDateEdit,
          newDueDate,
          updateBoletoWithFees
        })}
        <DialogTitle sx={{ display: 'flex', flexDirection: 'column' }}>
          <Typography variant="h6">Editar Data de Vencimento</Typography>
          {selectedInstallmentForDueDateEdit && (
            <Typography variant="subtitle2" color="textSecondary">
              Parcela: {selectedInstallmentForDueDateEdit.installment_id}
            </Typography>
          )}
        </DialogTitle>
        <DialogContent>
          <Grid container spacing={2}>
            <Grid item xs={12} md={6}>
              <LocalizationProvider dateAdapter={AdapterDateFns} locale={ptBR}>
                <DatePicker
                  label="Nova Data de Vencimento"
                  value={newDueDate}
                  format="dd/MM/yyyy"
                  onChange={(date) => {
                    console.log('üö® DATA SELECIONADA:', date);
                    setNewDueDate(date);
                    if (selectedInstallmentForDueDateEdit) {
                      const calculatedAmount = handleCalculateNewAmount(
                        selectedInstallmentForDueDateEdit, 
                        date, 
                        updateBoletoWithFees
                      );
                      console.log('üö® VALOR CALCULADO NO MODAL:', calculatedAmount);
                      setNewAmount(calculatedAmount);
                    }
                  }}
                  slots={{
                    textField: TextField
                  }}
                  slotProps={{
                    textField: {
                      variant: 'outlined',
                      fullWidth: true,
                      margin: 'normal'
                    }
                  }}
                />
              </LocalizationProvider>
            </Grid>
            <Grid item xs={12} md={6}>
              <TextField
                label="Novo Valor"
                fullWidth
                value={newAmount}
                onChange={(e) => setNewAmount(e.target.value)}
                margin="normal"
                InputProps={{
                  startAdornment: <InputAdornment position="start">R$</InputAdornment>,
                }}
              />
            </Grid>
            <Grid item xs={12}>
              <Box sx={{ display: 'flex', alignItems: 'center' }}>
                <FormControlLabel
                  control={
                    <Checkbox
                      checked={updateBoletoWithFees}
                      onChange={(e) => {
                        const isChecked = e.target.checked;
                        setUpdateBoletoWithFees(isChecked);
                        
                        if (isChecked && selectedInstallmentForDueDateEdit && newDueDate) {
                          const calculatedAmount = handleCalculateNewAmount(
                            selectedInstallmentForDueDateEdit, 
                            newDueDate, 
                            true
                          );
                          setNewAmount(calculatedAmount);
                          setUpdateBoletoOnly(false);
                        } else if (!isChecked && selectedInstallmentForDueDateEdit) {
                          setNewAmount(formatCurrency(selectedInstallmentForDueDateEdit.balance));
                        }
                      }}
                    />
                  }
                  label="Atualizar com Juros e Multa"
                />
              </Box>
            </Grid>
            <Grid item xs={12}>
              <Box sx={{ display: 'flex', alignItems: 'center' }}>
                <FormControlLabel
                  control={
                    <Checkbox
                      checked={updateBoletoOnly}
                      onChange={(e) => {
                        const isChecked = e.target.checked;
                        setUpdateBoletoOnly(isChecked);
                        
                        if (isChecked) {
                          setUpdateBoletoWithFees(false);
                        }
                      }}
                    />
                  }
                  label="Atualizar Apenas Boleto"
                />
              </Box>
            </Grid>
          </Grid>
        </DialogContent>
        <DialogActions>
          <Button 
            onClick={() => {
              setEditDueDateDialogOpen(false);
            }} 
            color="secondary"
          >
            Cancelar
          </Button>
          <Button 
            onClick={() => {
              handleUpdateDueDateWithInterestAndPenalty(
                selectedInstallmentForDueDateEdit.installment_id, 
                newDueDate,
                cleanCurrencyValue(newAmount),
                updateBoletoWithFees,
                updateBoletoOnly
              );
            }} 
            color="primary" 
            variant="contained"
            disabled={!newDueDate}
          >
            Confirmar
          </Button>
        </DialogActions>
      </Dialog>
      <Dialog
        open={paymentDialogOpen}
        onClose={() => {
          setPaymentDialogOpen(false);
          setSelectedInstallmentForPayment(null);
          setPaymentValue('');
          setBankId('');
          setJuros('0');
          setDescontos('0');
        }}
        fullWidth
        maxWidth="sm"
      >
        <DialogTitle>
          <Box display="flex" alignItems="center" justifyContent="space-between">
            <Box display="flex" alignItems="center">
              <PaymentIcon sx={{ mr: 2 }} />
              <Typography variant="h6">Liquidar T√≠tulo</Typography>
            </Box>
          </Box>
        </DialogTitle>
        <DialogContent>
          {selectedInstallmentForPayment && (
            <Box>
              <Typography variant="subtitle1" gutterBottom>
                Parcela: {selectedInstallmentForPayment.full_name}
              </Typography>
              <Typography variant="body1" gutterBottom>
                Valor Original: R$ {formatCurrency(selectedInstallmentForPayment.amount)}
              </Typography>
              <TextField
                label="Valor a Pagar"
                fullWidth
                value={paymentValue}
                onChange={(e) => {
                  const inputValue = e.target.value.replace(/[^\d]/g, '');
                  const numericValue = parseInt(inputValue, 10) / 100;
                  setPaymentValue(formatCurrency(numericValue));
                }}
                margin="normal"
                InputProps={{
                  startAdornment: <InputAdornment position="start">R$</InputAdornment>,
                }}
              />
              <TextField
                label="Banco (ID)"
                fullWidth
                value={bankId || '2'}
                onChange={(e) => setBankId(e.target.value)}
                margin="normal"
                type="number"
              />
              <TextField
                label="Juros"
                fullWidth
                value={juros}
                onChange={(e) => {
                  const cleanedValue = cleanCurrencyValue(e.target.value);
                  setJuros(formatCurrency(cleanedValue));
                }}
                margin="normal"
                InputProps={{
                  startAdornment: <InputAdornment position="start">R$</InputAdornment>,
                }}
              />
              <TextField
                label="Descontos"
                fullWidth
                value={descontos}
                onChange={(e) => {
                  const cleanedValue = cleanCurrencyValue(e.target.value);
                  setDescontos(formatCurrency(cleanedValue));
                }}
                margin="normal"
                InputProps={{
                  startAdornment: <InputAdornment position="start">R$</InputAdornment>,
                }}
              />
              <LocalizationProvider dateAdapter={AdapterDateFns} locale={ptBR}>
                <DatePicker
                  label="Data de Pagamento"
                  value={paymentDate}
                  onChange={(newValue) => setPaymentDate(newValue)}
                  renderInput={(params) => (
                    <TextField 
                      {...params} 
                      fullWidth 
                      margin="normal" 
                      variant="outlined"
                    />
                  )}
                  format="dd/MM/yyyy"
                />
              </LocalizationProvider>
            </Box>
          )}
        </DialogContent>
        <DialogActions>
          <Button 
            onClick={() => {
              setPaymentDialogOpen(false);
              setSelectedInstallmentForPayment(null);
              setPaymentValue('');
              setBankId('');
              setJuros('0');
              setDescontos('0');
            }} 
            color="secondary"
          >
            Cancelar
          </Button>
          <Button 
            onClick={handleConfirmPayment} 
            color="primary" 
            variant="contained"
            disabled={!paymentValue}
          >
            Confirmar Pagamento
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
}
